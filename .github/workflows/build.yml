# Builds LWJGL and runs tests.
# No artifacts are uploaded, see LWJGL-CI/lwjgl3 for that.
name: LWJGL Build

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  JAVA_HOME: jdk8
  ANT_OPTS: -Xmx1G
  LWJGL_BUILD_TYPE: nightly
  ZULU_BUILD: 80.0.17-ca-jdk8.0.422

jobs:
  cache-kotlinc:
    name: Compile templates and cache kotlinc output
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 3
      - name: Download JDK
        run: |
          mkdir jdk8
          curl https://cdn.azul.com/zulu/bin/zulu8.${ZULU_BUILD}-linux_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Compile templates
        run: |
          git clone https://github.com/LWJGL-CI/OculusSDK.git ../OculusSDK
          ANT_OPTS=-Xmx4G ant -emacs compile-templates -Dbackend-threads=0
      - name: Cache kotlinc output
        uses: actions/cache/save@v3
        with:
          path: |
            bin/classes/generator
            bin/classes/templates
          key: cache-kotlinc-${{ github.sha }}
          enableCrossOsArchive: true

  linux:
    name: Linux
    needs: cache-kotlinc
    runs-on: ubuntu-latest
    container:
      image: centos:7
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64]
        include:
          - ARCH: x64
    defaults:
      run:
        shell: bash
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
    steps:
      - name: Upgrade git
        run: |
          sed -i \
            -e 's/^mirrorlist/#mirrorlist/' \
            -e 's/^#baseurl/baseurl/' \
            -e 's/mirror\.centos\.org/vault.centos.org/' \
            /etc/yum.repos.d/*.repo
          yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum -y install git
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 3
      - name: Configure yum
        run: |
          yum -y install epel-release
          yum -y update
      - name: Install build dependencies
        run: |
          yum -y install centos-release-scl
          sed -i \
            -e 's/^mirrorlist/#mirrorlist/' \
            -e 's/^#baseurl/baseurl/' \
            -e 's/^# baseurl/baseurl/' \
            -e 's/mirror\.centos\.org/vault.centos.org/' \
            /etc/yum.repos.d/CentOS-SCLo-scl*.repo
          yum -y install devtoolset-11-gcc-c++
          yum -y install ant awscli zstd
      - name: Install LWJGL dependencies
        run: |
          yum -y install libX11-devel libXt-devel gtk3-devel libdbus-1-dev
          mkdir jdk8
          curl -L https://cdn.azul.com/zulu/bin/zulu8.${ZULU_BUILD}-linux_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Restore kotlinc output
        uses: actions/cache/restore@v3
        with:
          path: |
            bin/classes/generator
            bin/classes/templates
          key: cache-kotlinc-${{ github.sha }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
      - name: Generate bindings
        run: ant -emacs clean-generated generate
      - name: Build Java
        run: ant -emacs compile
      - name: Build native
        run: |
          source scl_source enable devtoolset-11 || true
          ant -emacs compile-native
      - name: Run tests
        run: |
          source scl_source enable devtoolset-11 || true
          ant -emacs tests
      - name: Print test results
        run: cat bin/test/testng-results.xml
        if: failure()
      - name: Run demo with OpenJDK
        run: |
          source scl_source enable devtoolset-11 || true
          ant demo -Dclass=org.lwjgl.demo.util.lz4.HelloLZ4
      - name: Build GraalVM Native Image
        run: |
          source scl_source enable devtoolset-11 || true
          mkdir jdk-graalvm-22
          curl -L https://download.oracle.com/graalvm/22/latest/graalvm-jdk-22_linux-x64_bin.tar.gz | tar xz -C jdk-graalvm-22 --strip-components 1
          jdk-graalvm-22/bin/native-image -cp \
          bin/classes/lwjgl/core:\
          bin/classes/lwjgl/lz4:\
          bin/classes/samples:\
          modules/samples/src/test/resources:\
          bin/libs/java/joml.jar:\
          bin/libs/native:\
          config/native-image \
          org.lwjgl.demo.util.lz4.HelloLZ4 --verbose --no-fallback
      - name: Run demo with GraalVM JIT
        run: |
          source scl_source enable devtoolset-11 || true
          JAVA_HOME=jdk-graalvm-22 ant demo -Dclass=org.lwjgl.demo.util.lz4.HelloLZ4
      - name: Run demo with GraalVM Native Image
        run: ./org.lwjgl.demo.util.lz4.hellolz4

  linux-cross:
    name: Linux Cross
    needs: cache-kotlinc
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        ARCH: [arm32, arm64, ppc64le, riscv64]
        include:
          # ----
          - ARCH: arm32
            CROSS_ARCH: armhf
            TRIPLET: arm-linux-gnueabihf
          # ----
          - ARCH: arm64
            CROSS_ARCH: arm64
            TRIPLET: aarch64-linux-gnu
          # ----
          - ARCH: ppc64le
            CROSS_ARCH: ppc64el
            TRIPLET: powerpc64le-linux-gnu
          # ----
          - ARCH: riscv64
            CROSS_ARCH: riscv64
            TRIPLET: riscv64-linux-gnu
    env:
      LWJGL_BUILD_ARCH: ${{matrix.ARCH}}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 3
      - name: Install dependencies # make is necessary for -flto=auto
        run: |
          git config --global --add safe.directory $(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -yq update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -yq install ant awscli curl zstd gcc-${{matrix.TRIPLET}} g++-${{matrix.TRIPLET}} libc6-dev-${{matrix.CROSS_ARCH}}-cross make
          mkdir jdk8
          curl -L https://cdn.azul.com/zulu/bin/zulu8.${ZULU_BUILD}-linux_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Prepare cross-compilation for ${{matrix.CROSS_ARCH}}
        run: |
          sudo sed -i 's/deb mirror/deb [arch=amd64,i386] mirror/' /etc/apt/sources.list
          sudo grep "mirror+file" /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list
          sudo sed -i 's/amd64,i386/${{matrix.CROSS_ARCH}}/' /etc/apt/sources.list.d/ports.list
          sudo sed -i 's#mirror+file:/etc/apt/apt-mirrors.txt#http://ports.ubuntu.com/ubuntu-ports/#' /etc/apt/sources.list.d/ports.list
          sudo dpkg --add-architecture ${{matrix.CROSS_ARCH}}
          sudo apt-get update || true
      - name: Install cross-compilation dependencies
        run: sudo apt-get -yq -f --allow-unauthenticated --no-install-suggests --no-install-recommends install libgtk-3-dev:${{matrix.CROSS_ARCH}} libatk-bridge2.0-dev:${{matrix.CROSS_ARCH}} libgdk-pixbuf2.0-dev:${{matrix.CROSS_ARCH}} libglu-dev:${{matrix.CROSS_ARCH}} libgl1-mesa-glx:${{matrix.CROSS_ARCH}} libx11-dev:${{matrix.CROSS_ARCH}} libxt-dev:${{matrix.CROSS_ARCH}} libdbus-1-dev:${{matrix.CROSS_ARCH}} -o Dpkg::Options::="--force-overwrite"
      - name: Restore kotlinc output
        uses: actions/cache/restore@v3
        with:
          path: |
            bin/classes/generator
            bin/classes/templates
          key: cache-kotlinc-${{ github.sha }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
      - name: Generate bindings
        run: ant -emacs clean-generated generate
      - name: Build Java
        run: ant -emacs compile
      - name: Build native
        run: ant -emacs compile-native -Dgcc.libpath.opengl=/usr/lib/${{matrix.TRIPLET}}/mesa

  freebsd-cross:
    name: FreeBSD Cross
    needs: cache-kotlinc
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 3
          fetch-tags: true
      - name: Install dependencies
        run: |
          mkdir jdk8
          curl -L https://cdn.azul.com/zulu/bin/zulu8.${ZULU_BUILD}-linux_x64.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Restore kotlinc output
        uses: actions/cache/restore@v3
        with:
          path: |
            bin/classes/generator
            bin/classes/templates
          key: cache-kotlinc-${{ github.sha }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
      - name: Generate bindings
        run: ant -emacs clean-generated generate
      - name: Build Java
        run: ant -emacs compile
      - name: Build & Test
        uses: cross-platform-actions/action@v0.24.0
        with:
          operating_system: freebsd
          architecture: x86-64
          version: '13.2'
          memory: 8G
          shell: bash
          environment_variables: ANT_OPTS LWJGL_BUILD_TYPE
          run: |
            sudo pkg install -y openjdk8 apache-ant git gtk3 dbus
            ant -emacs compile-native
            ant -emacs tests || (cat bin/test/testng-results.xml ; exit 1) 
            ant demo -Dclass=org.lwjgl.demo.util.lz4.HelloLZ4

  macos:
    name: macOS
    needs: cache-kotlinc
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64, arm64]
        include:
          - ARCH: x64
            JDK: x64
          - ARCH: arm64
            JDK: aarch64
    env:
      LWJGL_BUILD_ARCH: ${{matrix.ARCH}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 3
      - name: Install dependencies
        run: |
          mkdir jdk8
          curl -L https://cdn.azul.com/zulu/bin/zulu8.${ZULU_BUILD}-macosx_${{matrix.JDK}}.tar.gz | tar xz -C jdk8 --strip-components 1
      - name: Restore kotlinc output
        uses: actions/cache/restore@v3
        with:
          path: |
            bin/classes/generator
            bin/classes/templates
          key: cache-kotlinc-${{ github.sha }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
      - name: Generate bindings
        run: ant -emacs clean-generated generate
      - name: Build Java
        run: ant -emacs compile
      - name: Build native
        run: ant -emacs compile-native
      - name: Run tests
        run: ant -emacs tests
      - name: Print test results
        run: cat bin/test/testng-results.xml
        if: failure()
      - name: Run demo with OpenJDK
        run: ant demo -Dclass=org.lwjgl.demo.util.lz4.HelloLZ4
      - name: Build GraalVM Native Image
        run: |
          mkdir jdk-graalvm-22
          curl -L https://download.oracle.com/graalvm/22/latest/graalvm-jdk-22_macos-${{matrix.JDK}}_bin.tar.gz | tar xz -C jdk-graalvm-22 --strip-components 1
          jdk-graalvm-22/Contents/Home/bin/native-image -cp \
          bin/classes/lwjgl/core:\
          bin/classes/lwjgl/lz4:\
          bin/classes/samples:\
          modules/samples/src/test/resources:\
          bin/libs/java/joml.jar:\
          bin/libs/native:\
          config/native-image \
          org.lwjgl.demo.util.lz4.HelloLZ4 --verbose --no-fallback
      - name: Run demo with GraalVM JIT
        run: JAVA_HOME=jdk-graalvm-22/Contents/Home ant demo -Dclass=org.lwjgl.demo.util.lz4.HelloLZ4
      - name: Run demo with GraalVM Native Image
        run: ./org.lwjgl.demo.util.lz4.hellolz4

  windows:
    name: Windows
    needs: cache-kotlinc
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x86, x64, arm64]
        include:
          - ARCH: x86
            MSVC_ARCH: amd64_x86
          - ARCH: x64
            MSVC_ARCH: amd64
          - ARCH: arm64
            MSVC_ARCH: amd64_arm64
    defaults:
      run:
        shell: cmd
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 3
      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.MSVC_ARCH }}
      - name: Clone Oculus SDK
        run: git clone https://github.com/LWJGL-CI/OculusSDK.git ../OculusSDK
        if: contains(matrix.ARCH, 'arm') != true
      - name: Install dependencies
        run: |
          Invoke-WebRequest https://cdn.azul.com/zulu/bin/zulu8.$Env:ZULU_BUILD-win_x64.zip -OutFile jdk.zip
          Expand-Archive -Path jdk.zip -DestinationPath .\
          Rename-Item zulu8.$Env:ZULU_BUILD-win_x64 jdk8
        shell: pwsh
      - name: Restore kotlinc output
        uses: actions/cache/restore@v3
        with:
          path: |
            bin/classes/generator
            bin/classes/templates
          key: cache-kotlinc-${{ github.sha }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
      - name: Generate bindings
        run: ant -emacs clean-generated generate
      - name: Build Java
        run: ant -emacs compile
      - name: Switch to x86 JDK
        run: |
          Remove-Item -Recurse jdk8
          Invoke-WebRequest https://cdn.azul.com/zulu/bin/zulu8.$Env:ZULU_BUILD-win_i686.zip -OutFile jdk.zip
          Expand-Archive -Path jdk.zip -DestinationPath .\
          Rename-Item zulu8.$Env:ZULU_BUILD-win_i686 jdk8
        shell: pwsh
        if: matrix.ARCH == 'x86'
      - name: Build native # TODO: remove old LLVM workaround, see https://github.com/actions/runner-images/issues/10001
        run: |
          set LWJGL_BUILD_ARCH=${{matrix.ARCH}}
          set PATH=%PATH:C:\Program Files\LLVM\bin;=%
          ant -emacs compile-native
      - name: Run tests
        run: ant -emacs tests
        if: contains(matrix.ARCH, 'arm') != true
      - name: Print test results
        run: type bin\test\testng-results.xml
        if: failure()
      - name: Run demo with OpenJDK
        run: ant demo -Dclass=org.lwjgl.demo.util.lz4.HelloLZ4
        if: matrix.ARCH == 'x64'
      - name: Download GraalVM
        run: |
          Invoke-WebRequest https://download.oracle.com/graalvm/22/latest/graalvm-jdk-22_windows-x64_bin.zip -OutFile jdk-graalvm.zip
          Expand-Archive -Path jdk-graalvm.zip -DestinationPath .\
          Get-ChildItem graalvm-jdk-22* | Rename-Item -newname jdk-graalvm-22
        shell: pwsh
        if: matrix.ARCH == 'x64'
      - name: Build GraalVM Native Image
        run: |
          jdk-graalvm-22\bin\native-image -cp ^
          bin/classes/lwjgl/core;^
          bin/classes/lwjgl/lz4;^
          bin/classes/samples;^
          modules/samples/src/test/resources;^
          bin/libs/java/joml.jar;^
          bin/libs/native;^
          config/native-image ^
          org.lwjgl.demo.util.lz4.HelloLZ4 --verbose --no-fallback
        if: matrix.ARCH == 'x64'
      - name: Run demo with GraalVM JIT
        run: |
          set JAVA_HOME=jdk-graalvm-22
          ant demo -Dclass=org.lwjgl.demo.util.lz4.HelloLZ4
        if: matrix.ARCH == 'x64'
      - name: Run demo with GraalVM Native Image
        run: org.lwjgl.demo.util.lz4.hellolz4.exe
        if: matrix.ARCH == 'x64'
